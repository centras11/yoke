{
  "name": "Yoke",
  "tagline": "Yoke: SSH Connection Manager",
  "body": "## Yoke: SSH Connection Manager\r\n\r\nYoke is a PHP based **SSH connection manager**. Sometimes storing servers hosts, usernames, ports and passwords can be tricky, SSH Key authentication makes it easier for us but it don't solve the problem of remembering all the other information.\r\nAlso, sometimes we face ourselfs with more than one private key to authenticate with (like multiple accounts on AWS).\r\n\r\nYoke aims to be a single repository for server managements to allow you to fastly connect to your servers just by remembering it's alias, like.\r\n\r\n```bash\r\nyoke connect myserver\r\n```\r\n\r\nWith security in mind, all information about your servers is encrypted using **AES 256**.\r\n\r\n**NOTICE** The encryption key is also stored into your computer, Yoke encryption only makes it harder for users to identify and decrypt the information. But just like SSH private keys, it does not protects against people getting access to your filesystem.\r\n\r\n### Installation\r\n\r\n> .phar distribution may be available in the future.\r\n\r\nIn order to use Yoke, you need PHP 5.5+ installed, with openssl extension enables (default on most installs)\r\n\r\nThe installation process is based on the global composer packages, so you need to have a working composer install with the correct binary path settings. [Read this tutorial ](https://akrabat.com/global-installation-of-php-tools-with-composer/)\r\n\r\nIf you have the requirements, install Yoke by running:\r\n\r\n```bash\r\ncomposer global require hernandev/yoke\r\n```\r\n\r\nThis is all you need to do! Time for usage instructions.\r\n\r\n### Usage\r\n\r\nUsing Yoke is really simple and straightforward.\r\n\r\n#### Adding a Server Connection\r\n\r\nIn order to store a new connection, just run the command\r\n\r\n```bash\r\nyoke add\r\n```\r\n\r\nYou will then be presented with a few questions:\r\n\r\n```\r\nRegistering a new Server Configuration! \r\n\r\nServer connection alias (server1): sample-server\r\n\r\nServer username (none): sample-user\r\n\r\nServer hostname or IP Address (192.168.0.1): server.sampleapp.com\r\n\r\nServer Port (22): 6262\r\n\r\nAuthentication Method:[system|key|password] (system): key  \r\n\r\nPrivate Key (~/.ssh/id_rsa): \r\n\r\nServer registered successfully! \r\n```\r\n\r\n#### Connecting\r\n\r\nAs we have this connection in place, we can stablish a connection, anytime we want just by running a simple command:\r\n\r\n```\r\nyoke connect sample-server\r\n```\r\n\r\nEasy right?\r\n\r\n#### Listing connections\r\n\r\nForgot a server alias? Don't worry, you can just run:\r\n\r\n```\r\nyoke servers\r\n```\r\n\r\nTo see a list of stored connections, like this one\r\n\r\n```\r\n+---------------+----------------------+-------------+------+--------------+\r\n| Name          | Host                 | Username    | Port | Auth. Method |\r\n+---------------+----------------------+-------------+------+--------------+\r\n| server-a      | a.sampleapp.comm     | admin       | 22   | key          |\r\n| server-b      | b.sampleapp.com      | root        | 2222 | system       |\r\n| server-c      | c.sampleapp.com      | root        | 22   | password     |\r\n+---------------+----------------------+-------------+------+--------------+\r\n```\r\n\r\n\r\n#### Removing a connection\r\nDon't need a stored connection anymore?\r\n\r\nJust run\r\n\r\n```\r\nyoke delete connection-name\r\n```\r\n\r\nConfirm the deletion and it's done!.\r\n\r\n\r\n#### Final Notes: \r\nThere are 3 different allows authentication types:\r\n\r\n- `key` - uses a specified private key to stabilish the connection\r\n- `system` - Do not specify a private key to connect, it lets ssh try to connection with current user's key\r\n- `password` - SSH does not allow passing plain password as a parameter, Yoke will just show the password on screen so you can copy and paste it. **Password authentication is highly unrecommended**.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}